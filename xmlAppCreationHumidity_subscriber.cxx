/* xmlAppCreationHumidity_subscriber.cxx

A subscription example

This file is derived from code automatically generated by the rtiddsgen 
command:

rtiddsgen -language C++03 -example <arch> xmlAppCreationHumidity.idl

Example subscription of type HumidityInfo automatically generated by 
'rtiddsgen'. To test them, follow these steps:

(1) Compile this file and the example publication.

(2) Start the subscription on the same domain used for RTI Data Distribution
Service  with the command
objs/<arch>/xmlAppCreationHumidity_subscriber <domain_id> <sample_count>

(3) Start the publication on the same domain used for RTI Data Distribution
Service with the command
objs/<arch>/xmlAppCreationHumidity_publisher <domain_id> <sample_count>

(4) [Optional] Specify the list of discovery initial peers and 
multicast receive addresses via an environment variable or a file 
(in the current working directory) called NDDS_DISCOVERY_PEERS. 

You can run any number of publishers and subscribers programs, and can 
add and remove them dynamically from the domain.

Example:

To run the example application on domain <domain_id>:

On UNIX systems: 

objs/<arch>/xmlAppCreationHumidity_publisher <domain_id> 
objs/<arch>/xmlAppCreationHumidity_subscriber <domain_id> 

On Windows systems:

objs\<arch>\xmlAppCreationHumidity_publisher <domain_id>  
objs\<arch>\xmlAppCreationHumidity_subscriber <domain_id>   

*/

#include <algorithm>
#include <iostream>

#include <dds/sub/ddssub.hpp>
#include <dds/core/ddscore.hpp>
// Or simply include <dds/dds.hpp> 

#include <dds/sub/DataReader.hpp>
#include <dds/sub/find.hpp>
#include <dds/pub/DataWriter.hpp>
#include <dds/pub/find.hpp>

#include <dds/core/QosProvider.hpp>

#include "xmlAppCreationHumidity.hpp"

class HumidityInfoReaderListener : public dds::sub::NoOpDataReaderListener<HumidityInfo> {
  public:

    HumidityInfoReaderListener() : count_ (0)
    {
    }

    void on_data_available(dds::sub::DataReader<HumidityInfo>& reader)
    {
        // Take all samples
        dds::sub::LoanedSamples<HumidityInfo> samples = reader.take();

        for ( dds::sub::LoanedSamples<HumidityInfo>::iterator sample_it = samples.begin();
        sample_it != samples.end(); sample_it++) {

            if (sample_it->info().valid()){
                count_++;
                std::cout << sample_it->data() << std::endl; 
            }        
        }      
    }

    int count() const
    {
        return count_;
    }

  private:
    int count_;
};

void subscriber_main(int domain_id, int sample_count)
{
	//registering types:
	rti::domain::register_type<HumidityInfo>("HumidityInfo");
	rti::domain::register_type<PercisionCommand>("PercisionCommand");

	//Reading everything from the XML
	auto eladQosProvider = dds::core::QosProvider("mySystemProfiles.xml");
	//Create participant using eladQosProvider instead of dds::core::QosProvider::Default()
	auto participant = eladQosProvider->create_participant_from_config("XmlAppDPLib::XmlAppsubscriberDP");

	//Creating data reader
	dds::sub::DataReader<HumidityInfo> reader = rti::sub::find_datareader_by_name<dds::sub::DataReader<HumidityInfo>>(
		participant,
		"HumiditySubscriber::HumidityDR"
		);

	//create a data writer
	dds::pub::DataWriter<PercisionCommand> writer = 
		rti::pub::find_datawriter_by_name<dds::pub::DataWriter<PercisionCommand>>(
		participant,
		"PecisionPublisher::PecisionDW");

	   


	PercisionCommand command;
	HumidityInfoReaderListener listener;
	int counter = 0;
	reader->listener(&listener, dds::core::status::StatusMask::data_available());

    while (listener.count() < sample_count || sample_count == 0) {
		std::cout << "ResolutionCommand subscriber sleeping for 4 sec..." << std::endl;
		if ((counter % 2) == 0)
			command.requestedResolution(Resolution::LOW);
		else
			command.requestedResolution(Resolution::HIGH);
		counter++;
		writer.write(command);

		rti::util::sleep(dds::core::Duration(4));
    }

    // Unset the listener to allow the reader destruction
    // (rti::core::ListenerBinder can do this automatically)
    reader.listener(NULL, dds::core::status::StatusMask::none());  
}

int main(int argc, char *argv[])
{

    int domain_id = 0;
    int sample_count = 0; // infinite loop

    if (argc >= 2) {
        domain_id = atoi(argv[1]);
    }
    if (argc >= 3) {
        sample_count = atoi(argv[2]);
    }

    // To turn on additional logging, include <rti/config/Logger.hpp> and
    // uncomment the following line:
    // rti::config::Logger::instance().verbosity(rti::config::Verbosity::STATUS_ALL);

    try {
        subscriber_main(domain_id, sample_count);
    } catch (const std::exception& ex) {
        // This will catch DDS exceptions
        std::cerr << "Exception in subscriber_main(): " << ex.what() << std::endl;
        return -1;
    }

    // RTI Connext provides a finalize_participant_factory() method
    // if you want to release memory used by the participant factory singleton.
    // Uncomment the following line to release the singleton:
    //
    // dds::domain::DomainParticipant::finalize_participant_factory();

    return 0;
}

